from charliepy.data import typ1B
import numpy as np
import math
import unittest

data = [{'ctab' : None, 'class' : None, 'chars' : None} for i in range(7)]

###############################################################################
#                             CHARACTER TABLES
#
# Tables of irreducible character values taken from CHEVIE. From ranks 2 to 5.
data[2]['ctab'] = np.array([
    [1,  1,  1, -1, -1],
    [2,  0, -2,  0,  0],
    [1, -1,  1, -1,  1],
    [1,  1,  1,  1,  1],
    [1, -1,  1,  1, -1]], dtype='int')

data[3]['ctab'] = np.array([
    [1,  1,  1,  1, -1, -1, -1, -1,  1,  1],
    [3,  1, -1, -3, -1, -1,  1,  1,  0,  0],
    [3, -1, -1,  3, -1,  1, -1,  1,  0,  0],
    [1, -1,  1, -1, -1,  1,  1, -1,  1, -1],
    [2,  2,  2,  2,  0,  0,  0,  0, -1, -1],
    [3, -1, -1,  3,  1, -1,  1, -1,  0,  0],
    [3,  1, -1, -3,  1,  1, -1, -1,  0,  0],
    [2, -2,  2, -2,  0,  0,  0,  0, -1,  1],
    [1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
    [1, -1,  1, -1,  1, -1, -1,  1,  1, -1]], dtype='int')

data[4]['ctab'] = np.array([
    [1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  1,  1,  1, -1,
        -1],
    [4,  2,  0, -2, -4, -2, -2,  0,  0,  2,  2,  0,  0,  0,  1,  1, -1, -1,  0,
         0],
    [6,  0, -2,  0,  6, -2,  0,  0,  2, -2,  0,  2,  0, -2,  0,  0,  0,  0,  0,
         0],
    [4, -2,  0,  2, -4, -2,  2,  0,  0,  2, -2,  0,  0,  0,  1, -1,  1, -1,  0,
         0],
    [1, -1,  1, -1,  1, -1,  1,  1, -1, -1,  1,  1, -1,  1,  1, -1, -1,  1, -1,
         1],
    [3,  3,  3,  3,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,
         1],
    [6,  0, -2,  0,  6,  0, -2,  2,  0,  0, -2, -2,  0,  2,  0,  0,  0,  0,  0,
         0],
    [8,  4,  0, -4, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, -1,  1,  1,  0,
         0],
    [8, -4,  0,  4, -8,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  1, -1,  1,  0,
         0],
    [6,  0, -2,  0,  6,  0,  2, -2,  0,  0,  2, -2,  0,  2,  0,  0,  0,  0,  0,
         0],
    [3, -3,  3, -3,  3, -1,  1,  1, -1, -1,  1, -1,  1, -1,  0,  0,  0,  0,  1,
        -1],
    [2,  2,  2,  2,  2,  0,  0,  0,  0,  0,  0,  2,  2,  2, -1, -1, -1, -1,  0,
         0],
    [6,  0, -2,  0,  6,  2,  0,  0, -2,  2,  0,  2,  0, -2,  0,  0,  0,  0,  0,
         0],
    [2, -2,  2, -2,  2,  0,  0,  0,  0,  0,  0,  2, -2,  2, -1,  1,  1, -1,  0,
         0],
    [3,  3,  3,  3,  3,  1,  1,  1,  1,  1,  1, -1, -1, -1,  0,  0,  0,  0, -1,
         -1],
    [4, -2,  0,  2, -4,  2, -2,  0,  0, -2,  2,  0,  0,  0,  1, -1,  1, -1,  0,
         0],
    [4,  2,  0, -2, -4,  2,  2,  0,  0, -2, -2,  0,  0,  0,  1,  1, -1, -1,  0,
         0],
    [3, -3,  3, -3,  3,  1, -1, -1,  1,  1, -1, -1,  1, -1,  0,  0,  0,  0, -1,
         1],
    [1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
         1],
    [1, -1,  1, -1,  1,  1, -1, -1,  1,  1, -1,  1, -1,  1,  1, -1, -1,  1,  1,
        -1]],
    dtype='int')

data[5]['ctab'] = np.array([
    [ 1,  1,  1,  1,  1,   1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,
         1,  1,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1],
    [ 5,  3,  1, -1, -3,  -5, -3, -3, -1, -1,  1,  1,  3,  3,  1,  1,  1, -1,
        -1, -1,  2,  2,  0,  0, -2, -2,  0,  0,  0,  0, -1, -1,  1,  1,  0,  0],
    [10,  2, -2, -2,  2,  10, -4, -2,  0,  2,  0,  2, -4, -2,  2,  0, -2,  2,
         0, -2,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,  0,  0,  0,  0,  0,  0],
    [10, -2, -2,  2,  2, -10, -4,  2,  0,  2,  0, -2,  4, -2,  2,  0, -2, -2,
         0,  2,  1, -1,  1, -1,  1, -1, -1,  1, -1,  1,  0,  0,  0,  0,  0,  0],
    [ 5, -3,  1,  1, -3,   5, -3,  3,  1, -1,  1, -1, -3,  3,  1, -1,  1,  1,
        -1,  1,  2, -2,  0,  0, -2,  2,  0,  0,  0,  0, -1,  1, -1,  1,  0,  0],
    [ 1, -1,  1, -1,  1,  -1, -1,  1,  1, -1, -1,  1,  1, -1,  1, -1,  1, -1,
         1, -1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1,  1, -1],
    [ 4,  4,  4,  4,  4,   4, -2, -2, -2, -2, -2, -2, -2, -2,  0,  0,  0,  0,
         0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0, -1, -1],
    [10,  2, -2, -2,  2,  10, -2, -4,  2,  0,  2,  0, -2, -4, -2,  0,  2, -2,
         0,  2,  1,  1, -1, -1,  1,  1,  1,  1, -1, -1,  0,  0,  0,  0,  0,  0],
    [15,  9,  3, -3, -9, -15, -3, -3, -1, -1,  1,  1,  3,  3, -1, -1, -1,  1,
         1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1, -1, -1,  0,  0],
    [20, -4, -4,  4,  4, -20, -2, -2,  2,  2, -2, -2,  2,  2,  0,  0,  0,  0,
         0,  0, -1,  1, -1,  1, -1,  1,  1, -1,  1, -1,  0,  0,  0,  0,  0,  0],
    [20,  4, -4, -4,  4,  20, -2,  2, -2,  2, -2,  2, -2,  2,  0,  0,  0,  0,
         0,  0, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  0,  0,  0,  0,  0,  0],
    [15, -9,  3,  3, -9,  15, -3,  3,  1, -1,  1, -1, -3,  3, -1,  1, -1, -1,
         1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  1, -1,  0,  0],
    [10, -2, -2,  2,  2, -10, -2,  4, -2,  0,  2,  0,  2, -4, -2,  0,  2,  2,
         0, -2,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  0,  0,  0,  0,  0,  0],
    [ 4, -4,  4, -4,  4,  -4, -2,  2,  2, -2, -2,  2,  2, -2,  0,  0,  0,  0,
         0,  0,  1, -1, -1,  1,  1, -1,  1, -1, -1,  1,  0,  0,  0,  0, -1,  1],
    [ 5,  5,  5,  5,  5,   5, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,
         1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1,  0,  0],
    [20,  4, -4, -4,  4,  20,  2, -2,  2, -2,  2, -2,  2, -2,  0,  0,  0,  0,
         0,  0, -1, -1,  1,  1, -1, -1, -1, -1,  1,  1,  0,  0,  0,  0,  0,  0],
    [10, -6,  2,  2, -6,  10,  0,  0,  0,  0,  0,  0,  0,  0,  2, -2,  2,  2,
        -2,  2, -2,  2,  0,  0,  2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [10,  6,  2, -2, -6, -10,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  2, -2,
        -2, -2, -2, -2,  0,  0,  2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [20, -4, -4,  4,  4, -20,  2,  2, -2, -2,  2,  2, -2, -2,  0,  0,  0,  0,
         0,  0, -1,  1, -1,  1, -1,  1, -1,  1, -1,  1,  0,  0,  0,  0,  0,  0],
    [ 5, -5,  5, -5,  5,  -5, -1,  1,  1, -1, -1,  1,  1, -1,  1, -1,  1, -1,
         1, -1, -1,  1,  1, -1, -1,  1, -1,  1,  1, -1,  1, -1, -1,  1,  0,  0],
    [ 6,  6,  6,  6,  6,   6,  0,  0,  0,  0,  0,  0,  0,  0, -2, -2, -2, -2,
        -2, -2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1],
    [10, -2, -2,  2,  2, -10,  2, -4,  2,  0, -2,  0, -2,  4, -2,  0,  2,  2,
         0, -2,  1, -1,  1, -1,  1, -1, -1,  1, -1,  1,  0,  0,  0,  0,  0,  0],
    [15,  9,  3, -3, -9, -15,  3,  3,  1,  1, -1, -1, -3, -3, -1, -1, -1,  1,
         1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, -1,  1,  1,  0,  0],
    [15, -9,  3,  3, -9,  15,  3, -3, -1,  1, -1,  1,  3, -3, -1,  1, -1, -1,
         1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  1, -1,  1,  0,  0],
    [10,  2, -2, -2,  2,  10,  2,  4, -2,  0, -2,  0,  2,  4, -2,  0,  2, -2,
         0,  2,  1,  1, -1, -1,  1,  1, -1, -1,  1,  1,  0,  0,  0,  0,  0,  0],
    [ 6, -6,  6, -6,  6,  -6,  0,  0,  0,  0,  0,  0,  0,  0, -2,  2, -2,  2,
        -2,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1],
    [ 5,  5,  5,  5,  5,   5,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
         1,  1, -1, -1, -1, -1, -1, -1,  1,  1,  1,  1, -1, -1, -1, -1,  0,  0],
    [10, -2, -2,  2,  2, -10,  4, -2,  0, -2,  0,  2, -4,  2,  2,  0, -2, -2,
         0,  2,  1, -1,  1, -1,  1, -1,  1, -1,  1, -1,  0,  0,  0,  0,  0,  0],
    [10,  2, -2, -2,  2,  10,  4,  2,  0, -2,  0, -2,  4,  2,  2,  0, -2,  2,
         0, -2,  1,  1, -1, -1,  1,  1,  1,  1, -1, -1,  0,  0,  0,  0,  0,  0],
    [ 5, -5,  5, -5,  5,  -5,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1,  1, -1,
         1, -1, -1,  1,  1, -1, -1,  1,  1, -1, -1,  1, -1,  1,  1, -1,  0,  0],
    [ 4,  4,  4,  4,  4,   4,  2,  2,  2,  2,  2,  2,  2,  2,  0,  0,  0,  0,
         0,  0,  1,  1,  1,  1,  1,  1, -1, -1, -1, -1,  0,  0,  0,  0, -1, -1],
    [ 5, -3,  1,  1, -3,   5,  3, -3, -1,  1, -1,  1,  3, -3,  1, -1,  1,  1,
        -1,  1,  2, -2,  0,  0, -2,  2,  0,  0,  0,  0,  1, -1,  1, -1,  0,  0],
    [ 5,  3,  1, -1, -3,  -5,  3,  3,  1,  1, -1, -1, -3, -3,  1,  1,  1, -1,
        -1, -1,  2,  2,  0,  0, -2, -2,  0,  0,  0,  0,  1,  1, -1, -1,  0,  0],
    [ 4, -4,  4, -4,  4,  -4,  2, -2, -2,  2,  2, -2, -2,  2,  0,  0,  0,  0,
         0,  0,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1,  0,  0,  0,  0, -1,  1],
    [ 1,  1,  1,  1,  1,   1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
         1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
    [ 1, -1,  1, -1,  1,  -1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1,  1, -1,
         1, -1,  1, -1, -1,  1,  1, -1,  1, -1, -1,  1,  1, -1, -1,  1,  1, -1]
    ], dtype='int')

###############################################################################
#                             CONJUGACY CLASSES
#
# Lists of conjugacy class data taken from CHEVIE. From ranks 2 to 6.
data[2]['class'] = [
    [[[1, 1], []], [[1], [1]], [[], [1, 1]], [[2], []], [[], [2]]],
    [[], [1], [1, 2, 1, 2], [2], [1, 2]],
    [8, 4, 8, 4, 4],
    ["11.", "1.1", ".11", "2.", ".2"]]

data[3]['class'] = [
    [[[1, 1, 1], []], [[1, 1], [1]], [[1], [1, 1]], [[], [1, 1, 1]],
        [[2, 1], []], [[1], [2]], [[2], [1]], [[], [2, 1]], [[3], []],
        [[], [3]]],
    [[], [1], [1, 2, 1, 2], [1, 2, 1, 2, 3, 2, 1, 2, 3], [2], [1, 2], [1, 3],
        [1, 2, 1, 2, 3], [2, 3], [1, 2, 3]],
    [48, 16, 16, 48, 8, 8, 8, 8, 6, 6],
    ["111.", "11.1", "1.11", ".111", "21.", "1.2", "2.1", ".21", "3.", ".3"]]

data[4]['class'] = [
    [[[1, 1, 1, 1], []], [[1, 1, 1], [1]], [[1, 1], [1, 1]], [[1], [1, 1, 1]],
        [[], [1, 1, 1, 1]], [[2, 1, 1], []], [[1, 1], [2]], [[2, 1], [1]],
        [[1], [2, 1]], [[2], [1, 1]], [[], [2, 1, 1]], [[2, 2], []],
        [[2], [2]], [[], [2, 2]], [[3, 1], []], [[1], [3]], [[3], [1]],
        [[], [3, 1]], [[4], []], [[], [4]]],
    [[], [1], [1, 2, 1, 2], [1, 2, 1, 2, 3, 2, 1, 2, 3],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4], [2], [1, 2], [1, 3],
        [1, 2, 1, 2, 3], [1, 2, 1, 2, 4], [1, 2, 1, 2, 3, 2, 1, 2, 3, 4],
        [2, 4], [1, 2, 4], [1, 2, 3, 2, 1, 2, 3, 4], [2, 3], [1, 2, 3],
        [1, 3, 4], [1, 2, 1, 2, 3, 4], [2, 4, 3], [1, 2, 3, 4]],
    [384, 96, 64, 96, 384, 32, 32, 16, 16, 32, 32, 32, 16, 32, 12, 12, 12, 12,
        8, 8],
    ["1111.", "111.1", "11.11", "1.111", ".1111", "211.", "11.2", "21.1",
        "1.21", "2.11", ".211", "22.", "2.2", ".22", "31.", "1.3", "3.1",
        ".31", "4.", ".4"]]

data[5]['class'] = [
    [[[1, 1, 1, 1, 1], []], [[1, 1, 1, 1], [1]], [[1, 1, 1], [1, 1]],
        [[1, 1], [1, 1, 1]], [[1], [1, 1, 1, 1]], [[], [1, 1, 1, 1, 1]],
        [[2, 1, 1, 1], []], [[1, 1, 1], [2]], [[2, 1, 1], [1]],
        [[1, 1], [2, 1]], [[2, 1], [1, 1]], [[1], [2, 1, 1]], [[2], [1, 1, 1]],
        [[], [2, 1, 1, 1]], [[2, 2, 1], []], [[2, 1], [2]], [[1], [2, 2]],
        [[2, 2], [1]], [[2], [2, 1]], [[], [2, 2, 1]], [[3, 1, 1], []],
        [[1, 1], [3]], [[3, 1], [1]], [[1], [3, 1]], [[3], [1, 1]],
        [[], [3, 1, 1]], [[3, 2], []], [[2], [3]], [[3], [2]], [[], [3, 2]],
        [[4, 1], []], [[1], [4]], [[4], [1]], [[], [4, 1]], [[5], []],
        [[], [5]]],
    [[], [1], [1, 2, 1, 2], [1, 2, 1, 2, 3, 2, 1, 2, 3],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2,
            1, 2, 3, 4, 5],
        [2], [1, 2], [1, 3], [1, 2, 1, 2, 3], [1, 2, 1, 2, 4],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 3, 2, 1, 2, 3, 5],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5], [2, 4],
        [1, 2, 4], [1, 2, 3, 2, 1, 2, 3, 4], [1, 3, 5], [1, 2, 1, 2, 3, 5],
        [1, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5], [2, 3], [1, 2, 3], [1, 3, 4],
        [1, 2, 1, 2, 3, 4], [1, 2, 1, 2, 4, 5],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 5], [2, 3, 5], [1, 2, 3, 5],
        [1, 2, 4, 5], [1, 2, 3, 2, 1, 2, 3, 4, 5], [2, 4, 3], [1, 2, 3, 4],
        [1, 3, 5, 4], [1, 2, 1, 2, 3, 4, 5], [2, 4, 3, 5], [1, 2, 3, 4, 5]],
    [3840, 768, 384, 384, 768, 3840, 192, 192, 64, 64, 64, 64, 192, 192, 64,
        32, 64, 64, 32, 64, 48, 48, 24, 24, 48, 48, 24, 24, 24, 24, 16, 16,
        16, 16, 10, 10],
    ["11111.", "1111.1", "111.11", "11.111", "1.1111", ".11111", "2111.",
        "111.2", "211.1", "11.21", "21.11", "1.211", "2.111", ".2111", "221.",
        "21.2", "1.22", "22.1", "2.21", ".221", "311.", "11.3", "31.1", "1.31",
        "3.11", ".311", "32.", "2.3", "3.2", ".32", "41.", "1.4", "4.1", ".41",
        "5.", ".5"]]

data[6]['class'] = [
    [[[1, 1, 1, 1, 1, 1], []], [[1, 1, 1, 1, 1], [1]], [[1, 1, 1, 1], [1, 1]],
        [[1, 1, 1], [1, 1, 1]], [[1, 1], [1, 1, 1, 1]], [[1], [1, 1, 1, 1, 1]],
        [[], [1, 1, 1, 1, 1, 1]], [[2, 1, 1, 1, 1], []], [[1, 1, 1, 1], [2]],
        [[2, 1, 1, 1], [1]], [[1, 1, 1], [2, 1]], [[2, 1, 1], [1, 1]],
        [[1, 1], [2, 1, 1]], [[2, 1], [1, 1, 1]], [[1], [2, 1, 1, 1]],
        [[2], [1, 1, 1, 1]], [[], [2, 1, 1, 1, 1]], [[2, 2, 1, 1], []],
        [[2, 1, 1], [2]], [[1, 1], [2, 2]], [[2, 2, 1], [1]], [[2, 1], [2, 1]],
        [[1], [2, 2, 1]], [[2, 2], [1, 1]], [[2], [2, 1, 1]],
        [[], [2, 2, 1, 1]], [[2, 2, 2], []], [[2, 2], [2]], [[2], [2, 2]],
        [[], [2, 2, 2]], [[3, 1, 1, 1], []], [[1, 1, 1], [3]], [[3, 1, 1], [1]],
        [[1, 1], [3, 1]], [[3, 1], [1, 1]], [[1], [3, 1, 1]], [[3], [1, 1, 1]],
        [[], [3, 1, 1, 1]], [[3, 2, 1], []], [[2, 1], [3]], [[3, 1], [2]],
        [[1], [3, 2]], [[3, 2], [1]], [[2], [3, 1]], [[3], [2, 1]],
        [[], [3, 2, 1]], [[3, 3], []], [[3], [3]], [[], [3, 3]],
        [[4, 1, 1], []], [[1, 1], [4]], [[4, 1], [1]], [[1], [4, 1]],
        [[4], [1, 1]], [[], [4, 1, 1]], [[4, 2], []], [[2], [4]], [[4], [2]],
        [[], [4, 2]], [[5, 1], []], [[1], [5]], [[5], [1]], [[], [5, 1]],
        [[6], []], [[], [6]]],
    [[], [1], [1, 2, 1, 2], [1, 2, 1, 2, 3, 2, 1, 2, 3],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2,
            1, 2, 3, 4, 5],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2,
            1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6],
        [2], [1, 2], [1, 3], [1, 2, 1, 2, 3], [1, 2, 1, 2, 4],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4], [1, 2, 1, 2, 3, 2, 1, 2, 3, 5],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 6],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2,
            1, 2, 3, 4, 5, 6],
        [2, 4], [1, 2, 4], [1, 2, 3, 2, 1, 2, 3, 4], [1, 3, 5],
        [1, 2, 1, 2, 3, 5], [1, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5],
        [1, 2, 1, 2, 4, 6], [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 6],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6],
        [2, 4, 6], [1, 2, 4, 6], [1, 2, 3, 2, 1, 2, 3, 4, 6],
        [1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6],
        [2, 3], [1, 2, 3], [1, 3, 4], [1, 2, 1, 2, 3, 4], [1, 2, 1, 2, 4, 5],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 5], [1, 2, 1, 2, 3, 2, 1, 2, 3, 5, 6],
        [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6], [2, 3, 5],
        [1, 2, 3, 5], [1, 2, 4, 5], [1, 2, 3, 2, 1, 2, 3, 4, 5], [1, 3, 4, 6],
        [1, 2, 1, 2, 3, 4, 6], [1, 2, 1, 2, 3, 5, 6],
        [1, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6], [2, 3, 5, 6],
        [1, 2, 3, 5, 6], [1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6], [2, 4, 3],
        [1, 2, 3, 4], [1, 3, 5, 4], [1, 2, 1, 2, 3, 4, 5],
        [1, 2, 1, 2, 4, 6, 5], [1, 2, 1, 2, 3, 2, 1, 2, 3, 4, 5, 6],
        [2, 4, 3, 6], [1, 2, 3, 4, 6], [1, 2, 4, 6, 5],
        [1, 2, 3, 2, 1, 2, 3, 4, 5, 6], [2, 4, 3, 5], [1, 2, 3, 4, 5],
        [1, 3, 5, 4, 6], [1, 2, 1, 2, 3, 4, 5, 6], [2, 4, 6, 3, 5],
        [1, 2, 3, 4, 5, 6]],
    [46080, 7680, 3072, 2304, 3072, 7680, 46080, 1536, 1536, 384, 384, 256, 256,
        384, 384, 1536, 1536, 256, 128, 256, 128, 64, 128, 256, 128, 256, 384,
        128, 128, 384, 288, 288, 96, 96, 96, 96, 288, 288, 48, 48, 48, 48, 48,
        48, 48, 48, 72, 36, 72, 64, 64, 32, 32, 64, 64, 32, 32, 32, 32, 20, 20,
        20, 20, 12, 12],
    ["111111.", "11111.1", "1111.11", "111.111", "11.1111", "1.11111",
        ".111111", "21111.", "1111.2", "2111.1", "111.21", "211.11", "11.211",
        "21.111", "1.2111", "2.1111", ".21111", "2211.", "211.2", "11.22",
        "221.1", "21.21", "1.221", "22.11", "2.211", ".2211", "222.", "22.2",
        "2.22", ".222", "3111.", "111.3", "311.1", "11.31", "31.11", "1.311",
        "3.111", ".3111", "321.", "21.3", "31.2", "1.32", "32.1", "2.31",
        "3.21", ".321", "33.", "3.3", ".33", "411.", "11.4", "41.1", "1.41",
        "4.11", ".411", "42.", "2.4", "4.2", ".42", "51.", "1.5", "5.1", ".51",
        "6.", ".6"]]

###############################################################################
#                           IRREDUCIBLE CHARACTERS
#
# Lists of irreducible character data taken from CHEVIE. From ranks 2 to 6.
data[2]['chars'] = [
    [[[1, 1], []], [[1], [1]], [[], [1, 1]], [[2], []], [[], [2]]],
    ["11.", "1.1", ".11", "2.", ".2"],
    [1, 1, 4, 0, 1],
    [2, 1, 4, 0, 2]]

data[3]['chars'] = [
    [[[1, 1, 1], []], [[1, 1], [1]], [[1], [1, 1]], [[], [1, 1, 1]],
        [[2, 1], []], [[1], [2]], [[2], [1]], [[], [2, 1]], [[3], []],
        [[], [3]]],
    ["111.", "11.1", "1.11", ".111", "21.", "1.2", "2.1", ".21", "3.", ".3"],
    [4, 3, 4, 9, 1, 2, 1, 4, 0, 1],
    [6, 3, 4, 9, 2, 2, 1, 5, 0, 3]]

data[4]['chars'] = [
    [[[1, 1, 1, 1], []], [[1, 1, 1], [1]], [[1, 1], [1, 1]], [[1], [1, 1, 1]],
        [[], [1, 1, 1, 1]], [[2, 1, 1], []], [[1, 1], [2]], [[2, 1], [1]],
        [[1], [2, 1]], [[2], [1, 1]], [[], [2, 1, 1]], [[2, 2], []],
        [[2], [2]], [[], [2, 2]], [[3, 1], []], [[1], [3]], [[3], [1]],
        [[], [3, 1]], [[4], []], [[], [4]]],
    ["1111.", "111.1", "11.11", "1.111", ".1111", "211.", "11.2", "21.1",
        "1.21", "2.11", ".211", "22.", "2.2", ".22", "31.", "1.3", "3.1", ".31",
        "4.", ".4"],
    [9, 6, 6, 9, 16, 4, 4, 3, 5, 4, 9, 2, 2, 6, 1, 2, 1, 4, 0, 1],
    [12, 7, 6, 9, 16, 6, 4, 3, 5, 4, 10, 4, 2, 8, 2, 3, 1, 6, 0, 4]]

data[5]['chars'] = [
    [[[1, 1, 1, 1, 1], []], [[1, 1, 1, 1], [1]], [[1, 1, 1], [1, 1]],
        [[1, 1], [1, 1, 1]], [[1], [1, 1, 1, 1]], [[], [1, 1, 1, 1, 1]],
        [[2, 1, 1, 1], []], [[1, 1, 1], [2]], [[2, 1, 1], [1]],
        [[1, 1], [2, 1]], [[2, 1], [1, 1]], [[1], [2, 1, 1]], [[2], [1, 1, 1]],
        [[], [2, 1, 1, 1]], [[2, 2, 1], []], [[2, 1], [2]], [[1], [2, 2]],
        [[2, 2], [1]], [[2], [2, 1]], [[], [2, 2, 1]], [[3, 1, 1], []],
        [[1, 1], [3]], [[3, 1], [1]], [[1], [3, 1]], [[3], [1, 1]],
        [[], [3, 1, 1]], [[3, 2], []], [[2], [3]], [[3], [2]], [[], [3, 2]],
        [[4, 1], []], [[1], [4]], [[4], [1]], [[], [4, 1]], [[5], []],
        [[], [5]]],
    ["11111.", "1111.1", "111.11", "11.111", "1.1111", ".11111", "2111.",
        "111.2", "211.1", "11.21", "21.11", "1.211", "2.111", ".2111", "221.",
        "21.2", "1.22", "22.1", "2.21", ".221", "311.", "11.3", "31.1", "1.31",
        "3.11", ".311", "32.", "2.3", "3.2", ".32", "41.", "1.4", "4.1", ".41",
        "5.", ".5"],
    [16, 11, 10, 11, 16, 25, 9, 7, 6, 7, 6, 10, 9, 16, 5, 4, 7, 4, 5, 11, 4, 4,
        3, 5, 4, 9, 2, 3, 2, 6, 1, 2, 1, 4, 0, 1],
    [20, 13, 10, 11, 16, 25, 12, 8, 7, 7, 6, 10, 9, 17, 8, 4, 8, 5, 5, 13, 6, 5,
        3, 6, 4, 11, 4, 3, 2, 9, 2, 4, 1, 7, 0, 5]]

data[6]['chars'] = [
    [[[1, 1, 1, 1, 1, 1], []], [[1, 1, 1, 1, 1], [1]], [[1, 1, 1, 1], [1, 1]],
        [[1, 1, 1], [1, 1, 1]], [[1, 1], [1, 1, 1, 1]], [[1], [1, 1, 1, 1, 1]],
        [[], [1, 1, 1, 1, 1, 1]], [[2, 1, 1, 1, 1], []], [[1, 1, 1, 1], [2]],
        [[2, 1, 1, 1], [1]], [[1, 1, 1], [2, 1]], [[2, 1, 1], [1, 1]],
        [[1, 1], [2, 1, 1]], [[2, 1], [1, 1, 1]], [[1], [2, 1, 1, 1]],
        [[2], [1, 1, 1, 1]], [[], [2, 1, 1, 1, 1]], [[2, 2, 1, 1], []],
        [[2, 1, 1], [2]], [[1, 1], [2, 2]], [[2, 2, 1], [1]], [[2, 1], [2, 1]],
        [[1], [2, 2, 1]], [[2, 2], [1, 1]], [[2], [2, 1, 1]],
        [[], [2, 2, 1, 1]], [[2, 2, 2], []], [[2, 2], [2]], [[2], [2, 2]],
        [[], [2, 2, 2]], [[3, 1, 1, 1], []], [[1, 1, 1], [3]], [[3, 1, 1], [1]],
        [[1, 1], [3, 1]], [[3, 1], [1, 1]], [[1], [3, 1, 1]], [[3], [1, 1, 1]],
        [[], [3, 1, 1, 1]], [[3, 2, 1], []], [[2, 1], [3]], [[3, 1], [2]],
        [[1], [3, 2]], [[3, 2], [1]], [[2], [3, 1]], [[3], [2, 1]],
        [[], [3, 2, 1]], [[3, 3], []], [[3], [3]], [[], [3, 3]],
        [[4, 1, 1], []], [[1, 1], [4]], [[4, 1], [1]], [[1], [4, 1]],
        [[4], [1, 1]], [[], [4, 1, 1]], [[4, 2], []], [[2], [4]], [[4], [2]],
        [[], [4, 2]], [[5, 1], []], [[1], [5]], [[5], [1]], [[], [5, 1]],
        [[6], []], [[], [6]]],
    ["111111.", "11111.1", "1111.11", "111.111", "11.1111", "1.11111",
        ".111111", "21111.", "1111.2", "2111.1", "111.21", "211.11", "11.211",
        "21.111", "1.2111", "2.1111", ".21111", "2211.", "211.2", "11.22",
        "221.1", "21.21", "1.221", "22.11", "2.211", ".2211", "222.", "22.2",
        "2.22", ".222", "3111.", "111.3", "311.1", "11.31", "31.11", "1.311",
        "3.111", ".3111", "321.", "21.3", "31.2", "1.32", "32.1", "2.31",
        "3.21", ".321", "33.", "3.3", ".33", "411.", "11.4", "41.1", "1.41",
        "4.11", ".411", "42.", "2.4", "4.2", ".42", "51.", "1.5", "5.1", ".51",
        "6.", ".6"],
    [25, 18, 15, 15, 18, 25, 36, 16, 12, 11, 11, 10, 12, 11, 17, 16, 25, 10, 7,
        10, 7, 7, 12, 7, 10, 18, 7, 6, 7, 15, 9, 7, 6, 7, 6, 10, 9, 16, 5, 5, 4,
        7, 4, 6, 5, 11, 3, 3, 7, 4, 4, 3, 5, 4, 9, 2, 3, 2, 6, 1, 2, 1, 4, 0,
        1],
    [30, 21, 16, 15, 18, 25, 36, 20, 14, 13, 11, 10, 12, 11, 17, 16, 26, 14, 8,
        10, 9, 7, 13, 8, 10, 20, 12, 6, 8, 18, 12, 9, 7, 8, 6, 11, 9, 18, 8, 5,
        4, 9, 5, 6, 5, 14, 6, 3, 12, 6, 6, 3, 7, 4, 12, 4, 4, 2, 10, 2, 5, 1, 8,
        0, 6]]


class TestBData(unittest.TestCase):

    def test_chartabs(self):
        # Make sure the character tables agree with those from CHEVIE.
        for i in range(2, 6):
            ctab = typ1B.chartable(i)

            for j, mu in enumerate(typ1B._charlabels(i)):
                for k, nu in enumerate(typ1B._conjlabels(i)):
                    x = data[i]['chars'][0].index(mu)
                    y = data[i]['class'][0].index(nu)
                    self.assertTrue(ctab[j][k] == data[i]['ctab'][x][y],
                        'Rank ' + str(i) + ' character table not correct!')

        # Test that the character tables are internally consistent.
        for i in range(2, 10):
            ctab = typ1B.chartable(i)
            cents = typ1B.conjclassdata(list(range(1, i+1)))[1]
            size = math.factorial(i)*2**i
            classlens = [size//c for c in cents]

            # Row orthogonality relations.
            self.assertTrue(
                np.array_equal(
                    size*np.eye(ctab.shape[0], dtype='int'),
                    np.inner(ctab, ctab*classlens)
                ),
                'Rank ' + str(i) + ' character table not consistent!'
            )

            # Column orthogonality relations.
            self.assertTrue(
                np.array_equal(
                    cents*np.eye(ctab.shape[0], dtype='int'),
                    np.inner(ctab.T, ctab.T)
                ),
                'Rank ' + str(i) + ' character table not consistent!'
            )

    def test_conjclasses(self):
        # Make sure the conjugacy class information is being produced
        # correctly.
        for i in range(2, 7):
            classes = typ1B.conjclassdata(list(range(1, i+1)))

            for ind, bpart in enumerate(typ1B._conjlabels(i)):
                # Look up the conjugacy class labeled by bpart in the list
                # above and then check the data matches.
                x = data[i]['class'][0].index(bpart)

                self.assertEqual(data[i]['class'][1][x], classes[0][ind],
                    'Rank ' + str(i) + ' conjugacy class representatives are '
                    'not correct!')
                self.assertEqual(data[i]['class'][2][x], classes[1][ind],
                    'Rank ' + str(i) + ' centraliser orders are not correct!')
                self.assertEqual(data[i]['class'][3][x], classes[2][ind],
                    'Rank ' + str(i) + ' conjugacy class names are '
                    'not correct!')

    def test_characters(self):
        # Make sure the conjugacy class information is being produced
        # correctly.
        for i in range(2, 7):
            chars = typ1B.irrchardata(i)

            for ind, bpart in enumerate(typ1B._charlabels(i)):
                x = data[i]['chars'][0].index(bpart)

                self.assertEqual(data[i]['chars'][1][x], chars[0][ind],
                    'Rank ' + str(i+1) + ' character names are not correct!')
                self.assertEqual(data[i]['chars'][2][x], chars[1][ind],
                    'Rank ' + str(i+1) + ' a-values are not correct!')
                self.assertEqual(data[i]['chars'][3][x], chars[2][ind],
                    'Rank ' + str(i+1) + ' b-values are not correct!')

def suite():
    tests = ['test_chartabs']

    return unittest.TestLoader().loadTestsFromTestCase(TestBData)

# Run the test suite.
unittest.TextTestRunner(verbosity=2).run(suite())
