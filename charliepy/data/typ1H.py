########################################################
# Data for type H_3 and H_4 Coxeter groups
#

import numpy as np

#def cartanmat(n):
#    if n == 3:
#        return np.array([[           2, -utils.ir(5),  0],
#                         [-utils.ir(5),            2, -1],
#                         [           0,           -1,  2]])
#
#    if n == 4:
#        return np.array([[           2, -utils.ir(5),  0,  0],
#                         [-utils.ir(5),            2, -1,  0],
#                         [           0,           -1,  2, -1],
#                         [           0,            0, -1,  2]])

def degrees(n):
    if n == 3:
        return [2, 6, 10]
    if n == 4:
        return [2, 12, 20, 30]

def conjclassdata(ind, **kwargs):
    # stores the data: representatives, centraliser orders, names
    n = len(ind)
    repcentnam = list() 

    # Stored as an iterable because we're about to loop through it.
    if n == 3:
        reps = iter([[], [0], [0, 1], [0, 2], [1, 2], [0, 1, 2], [0, 1, 0, 1],
        [0, 1, 0, 1, 2], [0, 1, 0, 1, 2, 1, 0, 1, 2],
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2]])
    elif n == 4:
        reps = iter([[], [0], [0, 1], [0, 2], [1, 2], [0, 1, 2], [0, 1, 3],
        [0, 2, 3], [1, 3, 2], [0, 1, 0, 1], [0, 1, 2, 3], [0, 1, 0, 1, 2],
        [0, 1, 0, 1, 3], [0, 1, 0, 1, 2, 3], [0, 1, 2, 1, 0, 1, 2, 3],
        [0, 1, 0, 1, 2, 1, 0, 1, 2], [0, 1, 0, 1, 2, 1, 0, 1, 2, 3],
        [0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3],
        [0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3],
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2],
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3], 
        [0, 1, 0, 1, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3], 
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 3, 2, 1, 0, 1, 2, 3], 
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 3, 2, 1, 0, 1, 2, 3], 
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 2, 3], 
        [0, 1, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1, 0, 1,
            2, 3], 
        [1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1, 0,
            1, 2, 3], 
        [0, 1, 0, 1, 2, 1, 0, 1, 0, 2, 1, 0, 3, 2, 1, 0, 1, 0, 2, 1, 0, 3, 2,
            1, 0, 1, 2, 3], 
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 0, 1, 0, 2, 1, 0,
            3, 2, 1, 0, 1, 2, 3], 
        [0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1, 0, 1,
            2, 3, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3], 
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1,
            0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3], 
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 0, 1, 0, 2, 1, 0,
            1, 3, 2, 1, 0, 1, 0, 2, 1, 0, 3, 2, 1, 0, 1, 2, 3], 
        [0, 1, 0, 1, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1, 0,
            1, 2, 3, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1, 0,
            1, 2, 3], 
        [0, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1,
            0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1,
            0, 1, 2, 3, 2, 1, 0, 1, 0, 2, 1, 0, 1, 2, 3]])

    # Create words based on indices of the irreducible component.
    repcentnam.append([[ind[j] for j in rep] for rep in reps])

    repcentnam.append([120, 8, 10, 8, 6, 10, 10, 6, 10, 120])

    # Create names based on indices of the irreducible component.
    repcentnam.append([''.join(str(ind[j]) for j in rep) for rep in reps])

    return repcentnam

def irrchardata(n, **kwargs):
    if n == 3:
        binv=[15, 0, 5, 2, 6, 8, 1, 3, 3, 4]
        ainv=[15, 0, 5, 2, 6, 6, 1, 1, 3, 3]
        nam=["1_r'", "1_r", "5_r'", "5_r", "3_s", "overline{3}_s", "3_s'", 
             "overline{3}_s'", "4_r'", "4_r" ]

    elif n == 4:
        binv = [0, 60, 1, 31, 7, 37, 12, 20, 12, 13, 2, 22, 6, 26, 12, 11, 13,
                3, 21, 6, 18, 10, 11, 7, 12, 6, 4, 16, 10, 10, 5, 15, 8, 9]
        ainv = [0, 60, 1, 31, 1, 31, 6, 6, 6, 6, 2, 22, 2, 22, 6, 6, 6, 3, 18,
                3, 18, 6, 6, 6, 6, 6, 4,  16, 6, 6, 5, 15, 6, 6]
        nam = ["1_r", "1_r'", "4_t", "4_t'", "overline{4}_t", "overline{4}_t'",
               "6_s", "overline{6}_s", "8_r", "8_{rr}", "9_s", "9_s'",
               "overline{9}_s", "overline{9}_s'", "10_r", "16_t",
               "overline{16}_t", "16_{rr}", "16_{rr}'", "16_r", "16_r'",
               "18_r", "24_t", "overline{24}_t", "24_s", "overline{24}_s",
               "25_r", "25_r'", "30_s", "overline{30}_s", "36_{rr}",
               "36_{rr}'", "40_r", "48_{rr}"]

def chartable(n, **kwargs):
    pass
